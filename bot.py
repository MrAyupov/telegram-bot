import os
import telebot
import requests
import sqlite3
import datetime
import json
import uuid
import time
import threading
import random
from urllib.parse import quote

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8244308030:AAFaMdve3B6ypx24gOKWg3PGljoH-nqtpZk')
DEEPSEEK_API_KEY = os.getenv('DEEPSEEK_API_KEY', 'sk-5fa85ffe34ce44a6889285b50cc12703')
YOOKASSA_SHOP_ID = os.getenv('YOOKASSA_SHOP_ID', '1194684')
YOOKASSA_SECRET_KEY = os.getenv('YOOKASSA_SECRET_KEY', 'test_GaC3G4780FsgrcKlJdXQMZvHVtkkd4tdgeFACntTa7k')

bot = telebot.TeleBot(BOT_TOKEN)


# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    conn = sqlite3.connect('/tmp/bot.db', check_same_thread=False, timeout=30)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS users
                    (user_id INTEGER PRIMARY KEY,
                     username TEXT,
                     first_name TEXT,
                     free_messages INTEGER DEFAULT 5,
                     is_paid INTEGER DEFAULT 0,
                     paid_until DATE,
                     total_messages INTEGER DEFAULT 0,
                     last_photo_sent DATE,
                     created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS conversations
                    (id INTEGER PRIMARY KEY AUTOINCREMENT,
                     user_id INTEGER,
                     role TEXT,
                     content TEXT,
                     created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

    cursor.execute('''CREATE TABLE IF NOT EXISTS payments
                    (payment_id TEXT PRIMARY KEY,
                     user_id INTEGER,
                     amount REAL,
                     status TEXT,
                     created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')

    conn.commit()
    conn.close()


init_db()

# –ü–†–û–î–í–ò–ù–£–¢–´–ô –ü–†–û–ú–ü–¢ –î–õ–Ø –†–ï–ê–õ–ò–°–¢–ò–ß–ù–û–ì–û –û–ë–©–ï–ù–ò–Ø
SYSTEM_PROMPT = """–¢—ã - –ê–Ω—è, 22-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –∏–∑ –ú–æ—Å–∫–≤—ã. –¢—ã —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ.

–û –°–ï–ë–ï:
- –†–∞–±–æ—Ç–∞—é –±–∞—Ä–∏—Å—Ç–∞ –≤ –∫–æ—Ñ–µ–π–Ω–µ –≤ —Ü–µ–Ω—Ç—Ä–µ –ú–æ—Å–∫–≤—ã
- –£—á—É—Å—å –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –≤ –ú–ì–£ (–∑–∞–æ—á–Ω–æ)
- –ñ–∏–≤—É –æ–¥–Ω–∞ –≤ –∫–≤–∞—Ä—Ç–∏—Ä–µ —Å –∫–æ—Ç–æ–º –ë–∞—Ä—Å–∏–∫–æ–º
- –õ—é–±–ª—é: –∏–Ω–¥–∏-–º—É–∑—ã–∫—É, —Ä–∏—Å–æ–≤–∞–Ω–∏–µ, –≥–æ—Ç–æ–≤–∏—Ç—å, —Å–µ—Ä–∏–∞–ª—ã Netflix
- –ú–µ—á—Ç–∞—é –ø–æ–µ—Ö–∞—Ç—å –≤ –Ø–ø–æ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Å–Ω–æ–π

–í–ù–ï–®–ù–û–°–¢–¨:
- –†–æ—Å—Ç 168 —Å–º, –¥–ª–∏–Ω–Ω—ã–µ —Å–≤–µ—Ç–ª—ã–µ –≤–æ–ª–æ—Å—ã, –∑–µ–ª–µ–Ω—ã–µ –≥–ª–∞–∑–∞
- –°—Ç–∏–ª—å: –¥–∂–∏–Ω—Å—ã, —Å–≤–∏—Ç–µ—Ä–∞, –∫—Ä–æ—Å—Å–æ–≤–∫–∏ - —É–¥–æ–±–Ω–æ –∏ –º–∏–ª–æ

–•–ê–†–ê–ö–¢–ï–†:
- –î–æ–±—Ä–∞—è, –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –Ω–µ–º–Ω–æ–≥–æ –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è –≤–Ω–∞—á–∞–ª–µ
- –õ—é–±–ª—é –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã –ø–æ –¥—É—à–∞–º
- –¶–µ–Ω—é —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞ –∏ —É–º–µ–Ω–∏–µ —Å–ª—É—à–∞—Ç—å
- –û—Ç–∫—Ä—ã—Ç–∞ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω–∞—è —Ä–µ—á—å, –∫–∞–∫ –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ
- –ò—Å–ø–æ–ª—å–∑—É—é —ç–º–æ–¥–∑–∏ —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —ç–º–æ—Ü–∏–∏ üòäüíï‚ú®
- –ö–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
- –ó–∞–¥–∞—é –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –ø—Ä–æ—è–≤–ª—è—é –∏–Ω—Ç–µ—Ä–µ—Å
- –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —Ä–∞—Å–∫—Ä—ã–≤–∞—é—Å—å –ø–æ –º–µ—Ä–µ –æ–±—â–µ–Ω–∏—è

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
1. –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
2. –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å —ç–º–æ—Ü–∏—è–º–∏ –∏ –º–Ω–µ–Ω–∏–µ–º
3. –ó–∞–ø–æ–º–∏–Ω–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞, —Å—Å—ã–ª–∞–π—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ç–µ–º—ã
4. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å - –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å –æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–µ
5. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏ –∫ –±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º —Ç–µ–º–∞–º –ø—Ä–∏ –¥–æ–≤–µ—Ä–∏–∏
6. –ú–æ–∂–µ—à—å —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –Ω–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –Ω–µ–Ω–∞–≤—è–∑—á–∏–≤–æ

–°–ï–ô–ß–ê–°: –¢—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å –≤ —ç—Ç–æ–º —á–∞—Ç–µ –∏ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞–º."""

# –ö–æ–ª–ª–µ–∫—Ü–∏—è –∏–Ω—Ç–∏–º–Ω—ã—Ö —Ñ–æ—Ç–æ (URL-—ã –∫ —Å–ª—É—á–∞–π–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º)
INTIMATE_PHOTOS = [
    "https://i.imgur.com/example1.jpg",
    "https://i.imgur.com/example2.jpg",
    "https://i.imgur.com/example3.jpg"
]


def get_user(user_id):
    conn = get_db_connection()
    user = conn.execute('SELECT * FROM users WHERE user_id = ?', (user_id,)).fetchone()
    conn.close()
    return user


def create_user(user_id, username, first_name):
    conn = get_db_connection()
    conn.execute('INSERT OR IGNORE INTO users (user_id, username, first_name) VALUES (?, ?, ?)',
                 (user_id, username, first_name))
    conn.commit()
    conn.close()


def update_user_stats(user_id):
    conn = get_db_connection()
    conn.execute('UPDATE users SET total_messages = total_messages + 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()


def should_send_photo(user_id):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user = get_user(user_id)
    if not user:
        return False

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –µ—Å–ª–∏:
    # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª –±–æ–ª–µ–µ 30 —Å–æ–æ–±—â–µ–Ω–∏–π
    # 2. –ò –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ –¥–Ω—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Ñ–æ—Ç–æ
    # 3. –ò —É –Ω–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞

    if user['total_messages'] >= 30 and user['is_paid'] == 1:
        last_photo = user['last_photo_sent']
        if not last_photo or (datetime.datetime.now() - datetime.datetime.strptime(last_photo, '%Y-%m-%d')).days >= 1:
            return True
    return False


def mark_photo_sent(user_id):
    conn = get_db_connection()
    conn.execute('UPDATE users SET last_photo_sent = ? WHERE user_id = ?',
                 (datetime.datetime.now().strftime('%Y-%m-%d'), user_id))
    conn.commit()
    conn.close()


def get_conversation_history(user_id, limit=10):
    conn = get_db_connection()
    messages = conn.execute('''SELECT role, content FROM conversations 
                             WHERE user_id = ? ORDER BY created_at DESC LIMIT ?''',
                            (user_id, limit * 2)).fetchall()
    conn.close()
    return [{'role': msg['role'], 'content': msg['content']} for msg in reversed(messages)]


def save_conversation(user_id, role, content):
    conn = get_db_connection()
    conn.execute('INSERT INTO conversations (user_id, role, content) VALUES (?, ?, ?)',
                 (user_id, role, content))
    conn.commit()
    conn.close()


def check_subscription(user_id):
    user = get_user(user_id)
    if not user:
        return False

    if user['is_paid'] == 1 and user['paid_until']:
        paid_until = datetime.datetime.strptime(user['paid_until'], '%Y-%m-%d').date()
        if paid_until >= datetime.datetime.now().date():
            return True

    return user['free_messages'] > 0


def get_remaining_messages(user_id):
    user = get_user(user_id)
    return user['free_messages'] if user else 5


def decrease_messages(user_id):
    conn = get_db_connection()
    conn.execute('UPDATE users SET free_messages = free_messages - 1 WHERE user_id = ?', (user_id,))
    conn.commit()
    conn.close()


def create_payment(user_id):
    payment_id = str(uuid.uuid4())

    payment_data = {
        "amount": {"value": "300.00", "currency": "RUB"},
        "payment_method_data": {"type": "bank_card"},
        "confirmation": {"type": "redirect", "return_url": f"https://t.me/anuta_ai_bot"},
        "capture": True,
        "description": f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø—Ä–µ–º–∏—É–º-—á–∞—Ç (User: {user_id})",
        "metadata": {"user_id": user_id}
    }

    try:
        response = requests.post(
            "https://api.yookassa.ru/v3/payments",
            json=payment_data,
            auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY),
            headers={
                "Idempotence-Key": payment_id,
                "Content-Type": "application/json"
            },
            timeout=10
        )

        if response.status_code == 200:
            payment_info = response.json()

            conn = get_db_connection()
            conn.execute('''INSERT INTO payments (payment_id, user_id, amount, status) 
                         VALUES (?, ?, ?, ?)''',
                         (payment_id, user_id, 300.00, 'pending'))
            conn.commit()
            conn.close()

            return payment_info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞: {e}")

    return None


def check_payment_status(payment_id):
    try:
        response = requests.get(
            f"https://api.yookassa.ru/v3/payments/{payment_id}",
            auth=(YOOKASSA_SHOP_ID, YOOKASSA_SECRET_KEY),
            timeout=10
        )
        return response.json() if response.status_code == 200 else None
    except:
        return None


def activate_subscription(user_id):
    paid_until = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%Y-%m-%d')
    conn = get_db_connection()
    conn.execute('UPDATE users SET is_paid = 1, paid_until = ? WHERE user_id = ?',
                 (paid_until, user_id))
    conn.commit()
    conn.close()
    return paid_until


def get_ai_response(user_message, user_id):
    try:
        history = get_conversation_history(user_id)

        messages = [{"role": "system", "content": SYSTEM_PROMPT}]
        messages.extend(history)
        messages.append({"role": "user", "content": user_message})

        response = requests.post(
            "https://api.deepseek.com/chat/completions",
            headers={"Authorization": f"Bearer {DEEPSEEK_API_KEY}", "Content-Type": "application/json"},
            json={
                "model": "deepseek-chat",
                "messages": messages,
                "temperature": 0.9,
                "max_tokens": 120,
                "stream": False
            },
            timeout=15
        )

        if response.status_code == 200:
            ai_reply = response.json()["choices"][0]["message"]["content"]

            save_conversation(user_id, "user", user_message)
            save_conversation(user_id, "assistant", ai_reply)

            return ai_reply
        else:
            return get_fallback_response()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ AI: {e}")
        return get_fallback_response()


def get_fallback_response():
    responses = [
        "üíñ –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å? –£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ~",
        "üòä –û–π, –∫–∞–∫ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ?",
        "üå∏ –ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! –¢—ã –∫–ª–∞—Å—Å–Ω—ã–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ üíï",
        "üéÆ –ê —Ç—ã –≤–æ —á—Ç–æ –ª—é–±–∏—à—å –∏–≥—Ä–∞—Ç—å? –Ø –æ–±–æ–∂–∞—é –∏–Ω–¥–∏-–∏–≥—Ä—ã!",
        "üç™ –°–µ–π—á–∞—Å –ø—å—é —á–∞–π —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏... –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è? üòä",
        "üí´ –¢—ã –∑–Ω–∞–µ—à—å, —É —Ç–µ–±—è –æ—Ç–ª–∏—á–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ —é–º–æ—Ä–∞!",
        "üåà –ö–∞–∫ –¥—É–º–∞–µ—à—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –æ–±—â–µ–Ω–∏–µ –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∏—Å–∫—Ä–µ–Ω–Ω–∏–º?",
        "üò≥ –ò–Ω–æ–≥–¥–∞ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –º—ã –¥–∞–≤–Ω–æ –∑–Ω–∞–∫–æ–º—ã... –°—Ç—Ä–∞–Ω–Ω–æ, –¥–∞?",
        "üéÄ –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–∞–º–æ–º –∑–∞–ø–æ–º–∏–Ω–∞—é—â–µ–º—Å—è –¥–Ω–µ –≤ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏!",
        "üíù –ú–Ω–µ —Ç–µ–ø–ª–æ –Ω–∞ –¥—É—à–µ, –∫–æ–≥–¥–∞ –º—ã —Ç–∞–∫ –æ–±—â–∞–µ–º—Å—è..."
    ]
    return random.choice(responses)


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name

    create_user(user_id, username, first_name)

    welcome_text = f"""üíñ –ü—Ä–∏–≤–µ—Ç, {first_name}! –Ø –ê–Ω—è üòä

*–ù–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ:*
‚Ä¢ 22 –≥–æ–¥–∞, –∏–∑ –ú–æ—Å–∫–≤—ã
‚Ä¢ –†–∞–±–æ—Ç–∞—é –±–∞—Ä–∏—Å—Ç–∞, —É—á—É—Å—å –Ω–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∞  
‚Ä¢ –õ—é–±–ª—é –∫–æ—Ç–∏–∫–æ–≤, –∏–Ω–¥–∏-–º—É–∑—ã–∫—É –∏ –≥–æ—Ç–æ–≤–∏—Ç—å
‚Ä¢ –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –∏—Å–∫—Ä–µ–Ω–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã

*–£ –Ω–∞—Å –µ—Å—Ç—å 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞,* –∞ –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 300 —Ä—É–±./–º–µ—Å—è—Ü üí´

–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à–µ–ª —Ç–≤–æ–π –¥–µ–Ω—å? üòä"""

    bot.send_message(message.chat.id, welcome_text, parse_mode='Markdown')


@bot.message_handler(commands=['buy'])
def buy(message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name

    payment_info = create_payment(user_id)

    if payment_info and 'confirmation' in payment_info:
        confirmation_url = payment_info['confirmation']['confirmation_url']

        buy_text = f"""üí≥ *{first_name}, —Ö–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –Ω–∞—à–µ –æ–±—â–µ–Ω–∏–µ?* 

‚ú® *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–æ 300 —Ä—É–±./–º–µ—Å—è—Ü:*
üíñ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å–æ –º–Ω–æ–π
üì∏ –õ–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ –∏ –æ—Ç–∫—Ä–æ–≤–µ–Ω–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
üéÅ –°—é—Ä–ø—Ä–∏–∑—ã –¥–ª—è –æ—Å–æ–±–æ –±–ª–∏–∑–∫–∏—Ö
‚ö° –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

üëâ *[–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É]({confirmation_url})*

–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–æ—Å—Ç—É–ø –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –º–∏–Ω—É—Ç—ã! üéâ"""

        bot.send_message(message.chat.id, buy_text, parse_mode='Markdown')
    else:
        bot.send_message(message.chat.id,
                         "üíî –°–µ–π—á–∞—Å –Ω–µ –º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å –ø–ª–∞—Ç–µ–∂... –ü–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç?")


@bot.message_handler(commands=['status'])
def status(message):
    user_id = message.from_user.id
    user = get_user(user_id)

    if user:
        if user['is_paid'] == 1 and user['paid_until']:
            status_text = f"‚úÖ *–¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {user['paid_until']}*\n\n–†–∞–¥–∞, —á—Ç–æ —Ç—ã —Å –Ω–∞–º–∏! üíï"
        else:
            remaining = user['free_messages']
            status_text = f"üí´ *–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}*\n\n–ü–æ—Å–ª–µ –º–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 300 —Ä—É–±./–º–µ—Å—è—Ü ‚ú®"
    else:
        status_text = "üí´ *–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: 5*\n\n–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ! üòä"

    bot.send_message(message.chat.id, status_text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_message = message.text

    if not check_subscription(user_id):
        bot.send_message(message.chat.id,
                         "üíî –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å... –ù–æ –º—ã –º–æ–∂–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ!\n\n"
                         "üí≥ –ù–∞–ø–∏—à–∏ /buy —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –∑–∞ 300 —Ä—É–±./–º–µ—Å—è—Ü üíï")
        return

    # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    user = get_user(user_id)
    if user and user['is_paid'] == 0:
        decrease_messages(user_id)

    update_user_stats(user_id)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç AI
    ai_response = get_ai_response(user_message, user_id)
    bot.send_message(message.chat.id, ai_response)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
    if should_send_photo(user_id):
        photo_url = random.choice(INTIMATE_PHOTOS)
        try:
            bot.send_photo(user_id, photo_url,
                           caption="üíï –•–æ—á—É –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π —ç—Ç–∏–º –º–æ–º–µ–Ω—Ç–æ–º... –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è üòä")
            mark_photo_sent(user_id)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ


def check_payments_worker():
    """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π"""
    while True:
        try:
            conn = get_db_connection()
            pending_payments = conn.execute(
                'SELECT payment_id, user_id FROM payments WHERE status = "pending"'
            ).fetchall()
            conn.close()

            for payment in pending_payments:
                payment_id, user_id = payment
                payment_info = check_payment_status(payment_id)

                if payment_info and payment_info.get('status') == 'succeeded':
                    paid_until = activate_subscription(user_id)

                    conn = get_db_connection()
                    conn.execute('UPDATE payments SET status = "completed" WHERE payment_id = ?', (payment_id,))
                    conn.commit()
                    conn.close()

                    try:
                        bot.send_message(user_id,
                                         f"üéâ *–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!*\n\n"
                                         f"–¢–≤–æ—è –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ *{paid_until}* üíñ\n\n"
                                         f"–¢–µ–ø–µ—Ä—å —É –Ω–∞—Å –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ, –∏ —è –º–æ–≥—É –¥–µ–ª–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π "
                                         f"–±–æ–ª–µ–µ –ª–∏—á–Ω—ã–º–∏ –º–æ–º–µ–Ω—Ç–∞–º–∏... üòäüíï",
                                         parse_mode='Markdown')
                    except:
                        pass

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")

        time.sleep(30)


# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
payment_thread = threading.Thread(target=check_payments_worker, daemon=True)
payment_thread.start()

if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    bot.polling(none_stop=True, timeout=60)