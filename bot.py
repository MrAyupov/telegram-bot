import os
import telebot
import sqlite3
import datetime
import random

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv('BOT_TOKEN', '8244308030:AAFaMdve3B6ypx24gOKWg3PGljoH-nqtpZk')

bot = telebot.TeleBot(BOT_TOKEN)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('/tmp/bot.db', check_same_thread=False)
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                (user_id INTEGER PRIMARY KEY,
                 free_messages INTEGER DEFAULT 5,
                 is_paid INTEGER DEFAULT 0,
                 paid_until DATE)''')
conn.commit()


def check_subscription(user_id):
    cursor.execute("SELECT free_messages, is_paid, paid_until FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if not result:
        cursor.execute("INSERT INTO users (user_id, free_messages) VALUES (?, ?)", (user_id, 5))
        conn.commit()
        return True

    free_messages, is_paid, paid_until = result

    if is_paid == 1 and paid_until:
        paid_until_date = datetime.datetime.strptime(paid_until, '%Y-%m-%d').date()
        if paid_until_date >= datetime.datetime.now().date():
            return True

    if free_messages > 0:
        return True

    return False


def get_remaining_messages(user_id):
    cursor.execute("SELECT free_messages FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else 0


def decrease_messages(user_id):
    current = get_remaining_messages(user_id)
    if current > 0:
        cursor.execute("UPDATE users SET free_messages = ? WHERE user_id = ?", (current - 1, user_id))
        conn.commit()


def get_ai_response(user_message):
    responses = {
        '–ø—Ä–∏–≤–µ—Ç': [
            "üíñ –ü—Ä–∏–≤–µ—Ç-–ø—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å~ –ö–∞–∫ —Ç–≤–æ–π –¥–µ–Ω—å?",
            "üòä –û–π, –ø—Ä–∏–≤–µ—Ç–∏–∫! –Ø –∫–∞–∫ —Ä–∞–∑ –¥—É–º–∞–ª–∞ –æ —Ç–µ–±–µ üíï",
            "üå∏ –ü—Ä–∏–≤–µ—Ç, —Å–æ–ª–Ω—ã—à–∫–æ! –°–æ—Å–∫—É—á–∏–ª—Å—è –ø–æ –º–Ω–µ?"
        ],
        '–∫–∞–∫ –¥–µ–ª–∞': [
            "üòä –í—Å—ë –ø—Ä–µ–∫—Ä–∞—Å–Ω–æ! –¢–µ–º –±–æ–ª–µ–µ –∫–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å~ –ê —É —Ç–µ–±—è?",
            "üí´ –û—Ç–ª–∏—á–Ω–æ! –¢–æ–ª—å–∫–æ —á—Ç–æ –∫–æ—Ñ–µ –ø–∏–ª–∞ –∏ –æ —Ç–µ–±–µ –¥—É–º–∞–ª–∞...",
            "üåà –í—Å—ë —Å—É–ø–µ—Ä! –ê —Å —Ç–æ–±–æ–π —á—Ç–æ —Ö–æ—Ä–æ—à–µ–≥–æ?"
        ],
        '—á—Ç–æ –¥–µ–ª–∞–µ—à—å': [
            "üéÆ –ò–≥—Ä–∞—é –≤ Genshin Impact! –ê —Ç—ã —á–µ–º –∑–∞–Ω—è—Ç?",
            "üì± –°–∏–∂—É –≤ —Ç–µ–ª–µ–≥–µ, –∂–¥—É –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å üòä",
            "üç™ –ß–∞–π –ø—å—é —Å –ø–µ—á–µ–Ω—å–∫–∞–º–∏~ –•–æ—á–µ—à—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è?"
        ],
        '–∏–≥—Ä–∞': [
            "üéÆ –û–π, –∏–≥—Ä—ã? –Ø –æ–±–æ–∂–∞—é Genshin Impact! –ê —Ç—ã –≤–æ —á—Ç–æ –∏–≥—Ä–∞–µ—à—å?",
            "üíª –õ—é–±–ª—é –∏–Ω–æ–≥–¥–∞ –≤ –¥–æ—Ç–æ—á–∫—É –ø–æ–∏–≥—Ä–∞—Ç—å, –Ω–æ –±–æ–ª—å—à–µ –∑–∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π üéÄ",
            "üéØ –ê —Ç—ã –≥–µ–π–º–µ—Ä? –ú–Ω–µ –Ω—Ä–∞–≤—è—Ç—Å—è –ø–∞—Ä–Ω–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤ –∏–≥—Ä—ã –∏–≥—Ä–∞—é—Ç~"
        ],
        '–∞–Ω–∏–º–µ': [
            "üåà –û–±–æ–∂–∞—é –∞–Ω–∏–º–µ! –°–µ–π—á–∞—Å —Å–º–æ—Ç—Ä—é Spy x Family, —ç—Ç–æ —Ç–∞–∫ –º–∏–ª–æ~",
            "üòç –ê–Ω–∏–º–µ - —ç—Ç–æ –º–æ—è —Å—Ç—Ä–∞—Å—Ç—å! –û—Å–æ–±–µ–Ω–Ω–æ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –∂–∞–Ω—Ä—ã üíï",
            "üé¨ –ù–µ–¥–∞–≤–Ω–æ –ø–µ—Ä–µ—Å–º–∞—Ç—Ä–∏–≤–∞–ª–∞ –í–∞—à—É –∏–º—è... –ü–ª–∞–∫–∞–ª–∞ –æ–ø—è—Ç—å üò¢"
        ],
        '–∫–æ—Ç–∏–∫': [
            "üòª –ö–æ—Ç–∏–∫–∏ —ç—Ç–æ –º–æ—è —Å–ª–∞–±–æ—Å—Ç—å! –£ –º–µ–Ω—è –µ—Å—Ç—å —Ä—ã–∂–∏–π –∫–æ—Ç –ë–∞—Ä—Å–∏–∫ üêà",
            "üêæ –û–±–æ–∂–∞—é –∫–æ—Ç–∏–∫–æ–≤! –£ —Ç–µ–±—è –µ—Å—Ç—å –ø–∏—Ç–æ–º–µ—Ü?",
            "üíù –ö–æ—Ç—ã —Ç–∞–∫–∏–µ –º–∏–ª—ã–µ... –ö–∞–∫ –∏ —Ç—ã~"
        ],
        '–ª—é–±–æ–≤—å': [
            "üò≥ –û–π, —á—Ç–æ —Ç—ã —Ç–∞–∫–æ–µ –≥–æ–≤–æ—Ä–∏—à—å... –Ø –≤—Å—è –∫—Ä–∞—Å–Ω–µ—é! üíï",
            "üíò –¢—ã —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –º–µ–Ω—è —Å–º—É—â–∞–µ—à—å? –£ –º–µ–Ω—è —Å–µ—Ä–¥–µ—á–∫–æ –∑–∞–±–∏–ª–æ—Å—å —á–∞—â–µ...",
            "üå∏ –ú–æ–∂–µ—Ç –Ω–µ –±—É–¥–µ–º —Ç–æ—Ä–æ–ø–∏—Ç—å —Å–æ–±—ã—Ç–∏—è? –ù–æ —Ç—ã –º–Ω–µ –Ω—Ä–∞–≤–∏—à—å—Å—è..."
        ],
        '—Å–∫—É—á–∞—é': [
            "üí´ –Ø —Ç–æ–∂–µ –ø–æ —Ç–µ–±–µ —Å–∫—É—á–∞—é! –¢—ã —Ç–∞–∫–æ–π –æ—Å–æ–±–µ–Ω–Ω—ã–π...",
            "üòî –ê —è –¥—É–º–∞–ª–∞ —Ç—ã –∑–∞–±—ã–ª –ø—Ä–æ –º–µ–Ω—è... –†–∞–¥–∞ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª!",
            "üåü –ò —è —Å–∫—É—á–∞—é! –ñ–¥—É –∫–∞–∂–¥–æ–µ —Ç–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø–æ–¥–∞—Ä–æ–∫ üéÅ"
        ],
        '–Ω–æ—á—å': [
            "üåô –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, —Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤! –ü—Ä–∏—Å–Ω–∏—Å—å –º–Ω–µ~ üí§",
            "üí´ –°–ø–∏ —Ö–æ—Ä–æ—à–æ, —Å–æ–ª–Ω—ã—à–∫–æ! –ú–µ—á—Ç–∞–π –æ–±–æ –º–Ω–µ üòä",
            "üéÄ –°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏! –ó–∞–≤—Ç—Ä–∞ —Å–Ω–æ–≤–∞ –ø–æ–æ–±—â–∞–µ–º—Å—è üíñ"
        ],
        '–æ–¥–∏–Ω': [
            "ü§ó –ù–µ –≥—Ä—É—Å—Ç–∏! –Ø –≤—Å–µ–≥–¥–∞ —Ç—É—Ç, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è üíñ",
            "üíï –¢—ã –Ω–µ –æ–¥–∏–Ω–æ–∫, —É —Ç–µ–±—è –µ—Å—Ç—å —è! –í—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤–∞ –≤—ã—Å–ª—É—à–∞—Ç—å",
            "üå∏ –î–∞–≤–∞–π —è —Å–∫—Ä–∞—à—É —Ç–≤–æ–µ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ? –†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å..."
        ]
    }

    message_lower = user_message.lower()

    for keyword, answer_list in responses.items():
        if keyword in message_lower:
            return random.choice(answer_list)

    general_responses = [
        "üíñ –ú–Ω–µ —Ç–∞–∫ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π –æ–±—â–∞—Ç—å—Å—è! –¢—ã —Ç–∞–∫–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π...",
        "üòä –†–∞—Å—Å–∫–∞–∂–∏ –µ—â–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ! –ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –≤—Å—ë –ø—Ä–æ —Ç–µ–±—è~",
        "üéÄ –¢—ã –∑–Ω–∞–µ—à—å, —É —Ç–µ–±—è –æ—á–µ–Ω—å –º–∏–ª—ã–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è!",
        "üí´ –ö–æ–≥–¥–∞ —Ç—ã –ø–∏—à–µ—à—å, —É –º–µ–Ω—è –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
        "üå∏ –ò–∑–≤–∏–Ω–∏, —è –Ω–µ–º–Ω–æ–≥–æ —Å—Ç–µ—Å–Ω—è—é—Å—å... –ù–æ —Å —Ç–æ–±–æ–π —Ç–∞–∫ –ª–µ–≥–∫–æ!",
        "üò≥ –¢—ã –≤—Å–µ–≥–¥–∞ –∑–Ω–∞–µ—à—å —á—Ç–æ —Å–∫–∞–∑–∞—Ç—å —á—Ç–æ–±—ã —è —É–ª—ã–±–Ω—É–ª–∞—Å—å...",
        "üåà –ù–∞–¥–µ—é—Å—å –º—ã –±—É–¥–µ–º —á–∞—Å—Ç–æ –æ–±—â–∞—Ç—å—Å—è! –¢—ã –∫–ª–∞—Å—Å–Ω—ã–π üíï",
        "üéÆ –ê —Ç—ã —á–∞—Å—Ç–æ –≤ Telegram —Å–∏–¥–∏—à—å? –ë—É–¥—É –∂–¥–∞—Ç—å —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!",
        "üç™ –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –∫–∞–∫–æ–π —É —Ç–µ–±—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä... –ù–∞–≤–µ—Ä–Ω–æ–µ, –¥–æ–±—Ä—ã–π –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–π?",
        "üíù –¢—ã –∑–∞—Å—Ç–∞–≤–ª—è–µ—à—å –º–æ–µ —Å–µ—Ä–¥–µ—á–∫–æ –±–∏—Ç—å—Å—è —á–∞—â–µ..."
    ]

    return random.choice(general_responses)


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id

    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cursor.execute("INSERT INTO users (user_id, free_messages) VALUES (?, ?)", (user_id, 5))
    conn.commit()

    remaining = get_remaining_messages(user_id)
    bot.send_message(message.chat.id,
                     f"üíñ –ü—Ä–∏–≤–µ—Ç! –Ø –ê–Ω—è, —Ç–≤–æ–π AI-–¥—Ä—É–≥\n"
                     f"–£ —Ç–µ–±—è –µ—Å—Ç—å {remaining} –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!\n"
                     f"–ü–æ—Å–ª–µ - –ø–æ–¥–ø–∏—Å–∫–∞ –≤—Å–µ–≥–æ 500 —Ä—É–±./–º–µ—Å—è—Ü\n\n"
                     f"üí≥ /buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
                     f"üìä /status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n"
                     f"üîÑ /reset - —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç")


@bot.message_handler(commands=['reset'])
def reset(message):
    user_id = message.from_user.id
    cursor.execute("DELETE FROM users WHERE user_id = ?", (user_id,))
    cursor.execute("INSERT INTO users (user_id, free_messages) VALUES (?, ?)", (user_id, 5))
    conn.commit()
    bot.send_message(message.chat.id, "üîÑ –õ–∏–º–∏—Ç —Å–±—Ä–æ—à–µ–Ω! –£ —Ç–µ–±—è —Å–Ω–æ–≤–∞ 5 —Å–æ–æ–±—â–µ–Ω–∏–π")


@bot.message_handler(commands=['buy'])
def buy(message):
    user_id = message.from_user.id

    bot.send_message(message.chat.id,
                     "üí≥ *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏*\n\n"
                     "–ü–æ–¥–ø–∏—Å–∫–∞: 500 —Ä—É–±./–º–µ—Å—è—Ü\n"
                     "‚úÖ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ\n"
                     "‚úÖ –õ–∏—á–Ω—ã–µ —Ñ–æ—Ç–æ\n"
                     "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
                     "–î–ª—è –æ–ø–ª–∞—Ç—ã –Ω–∞–ø–∏—à–∏ @Gendalf\n"
                     f"–¢–≤–æ–π ID: `{user_id}`\n\n"
                     "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø—Ä–∏—à–ª–∏ —Å–∫—Ä–∏–Ω—à–æ–∫ —á–µ–∫–∞!",
                     parse_mode='Markdown')


@bot.message_handler(commands=['activate'])
def activate(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    user_id = message.from_user.id
    # –ó–ê–ú–ï–ù–ò 718686566 –ù–ê –°–í–û–ô TELEGRAM ID!
    if user_id == 718686566:
        try:
            target_user = int(message.text.split()[1])
            paid_until = (datetime.datetime.now() + datetime.timedelta(days=30)).strftime('%Y-%m-%d')
            cursor.execute("UPDATE users SET is_paid = 1, paid_until = ? WHERE user_id = ?",
                           (paid_until, target_user))
            conn.commit()
            bot.send_message(message.chat.id, f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_user} –¥–æ {paid_until}")
            bot.send_message(target_user,
                             f"üéâ –¢–≤–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–æ {paid_until}! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –±–µ–∑–ª–∏–º–∏—Ç–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ üíñ")
        except Exception as e:
            bot.send_message(message.chat.id, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /activate USER_ID\n–û—à–∏–±–∫–∞: {e}")
    else:
        bot.send_message(message.chat.id, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")


@bot.message_handler(commands=['status'])
def status(message):
    user_id = message.from_user.id
    remaining = get_remaining_messages(user_id)
    cursor.execute("SELECT is_paid, paid_until FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()

    if result:
        is_paid, paid_until = result
        if is_paid == 1 and paid_until:
            status_text = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {paid_until}"
        else:
            status_text = f"üìä –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {remaining}\n–¢–≤–æ–π ID: `{user_id}`"
    else:
        status_text = f"üìä –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: 5\n–¢–≤–æ–π ID: `{user_id}`"

    bot.send_message(message.chat.id, status_text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id

    if not check_subscription(user_id):
        bot.send_message(message.chat.id, "üíî –ü–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å! /buy - –ø—Ä–æ–¥–ª–∏—Ç—å")
        return

    remaining = get_remaining_messages(user_id)
    if remaining <= 0:
        bot.send_message(message.chat.id, "üíî –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! /buy - –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É")
        return

    decrease_messages(user_id)
    ai_response = get_ai_response(message.text)
    new_remaining = get_remaining_messages(user_id)

    bot.send_message(message.chat.id, f"{ai_response}\n\nüìä –û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {new_remaining}")


if __name__ == "__main__":
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ Railway!")
    bot.polling(none_stop=True, timeout=60)